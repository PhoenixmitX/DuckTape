package net.apiduck.ducktape.render.native

import net.apiduck.ducktape.render.types.CssValue

trait NativeCSS:

  val backgroundAttachment: CssValue[String] = CssValue("backgroundAttachment")
  val visibility: CssValue[String] = CssValue("visibility")
  val textAlignLast: CssValue[String] = CssValue("textAlignLast")
  val borderRightStyle: CssValue[String] = CssValue("borderRightStyle")
  val counterIncrement: CssValue[String] = CssValue("counterIncrement")
  val orphans: CssValue[String] = CssValue("orphans")
  val cssText: CssValue[String] = CssValue("cssText")
  val borderStyle: CssValue[String] = CssValue("borderStyle")
  val pointerEvents: CssValue[String] = CssValue("pointerEvents")
  val borderTopColor: CssValue[String] = CssValue("borderTopColor")
  val markerEnd: CssValue[String] = CssValue("markerEnd")
  val textIndent: CssValue[String] = CssValue("textIndent")
  val listStyleImage: CssValue[String] = CssValue("listStyleImage")
  val cursor: CssValue[String] = CssValue("cursor")
  val listStylePosition: CssValue[String] = CssValue("listStylePosition")
  val wordWrap: CssValue[String] = CssValue("wordWrap")
  val borderTopStyle: CssValue[String] = CssValue("borderTopStyle")
  val alignmentBaseline: CssValue[String] = CssValue("alignmentBaseline")
  val opacity: CssValue[String] = CssValue("opacity")
  val direction: CssValue[String] = CssValue("direction")
  val strokeMiterlimit: CssValue[String] = CssValue("strokeMiterlimit")
  val maxWidth: CssValue[String] = CssValue("maxWidth")
  val color: CssValue[String] = CssValue("color")
  val clip: CssValue[String] = CssValue("clip")
  val borderRightWidth: CssValue[String] = CssValue("borderRightWidth")
  val verticalAlign: CssValue[String] = CssValue("verticalAlign")
  val overflow: CssValue[String] = CssValue("overflow")
  val mask: CssValue[String] = CssValue("mask")
  val borderLeftStyle: CssValue[String] = CssValue("borderLeftStyle")
  val emptyCells: CssValue[String] = CssValue("emptyCells")
  val stopOpacity: CssValue[String] = CssValue("stopOpacity")
  val paddingRight: CssValue[String] = CssValue("paddingRight")
  // TODO val parentRule: CssValue[CSSRule] = CssValue[CSSRule]("parentRule")
  val background: CssValue[String] = CssValue("background")
  val boxSizing: CssValue[String] = CssValue("boxSizing")
  val textJustify: CssValue[String] = CssValue("textJustify")
  val height: CssValue[String] = CssValue("height")
  val paddingTop: CssValue[String] = CssValue("paddingTop")
  val right: CssValue[String] = CssValue("right")
  val baselineShift: CssValue[String] = CssValue("baselineShift")
  val borderLeft: CssValue[String] = CssValue("borderLeft")
  val widows: CssValue[String] = CssValue("widows")
  val lineHeight: CssValue[String] = CssValue("lineHeight")
  val left: CssValue[String] = CssValue("left")
  val textUnderlinePosition: CssValue[String] = CssValue("textUnderlinePosition")
  val glyphOrientationHorizontal: CssValue[String] = CssValue("glyphOrientationHorizontal")
  val display: CssValue[String] = CssValue("display")
  val textAnchor: CssValue[String] = CssValue("textAnchor")
  val cssFloat: CssValue[String] = CssValue("cssFloat")
  val strokeDasharray: CssValue[String] = CssValue("strokeDasharray")
  val rubyAlign: CssValue[String] = CssValue("rubyAlign")
  val fontSizeAdjust: CssValue[String] = CssValue("fontSizeAdjust")
  val borderLeftColor: CssValue[String] = CssValue("borderLeftColor")
  val backgroundImage: CssValue[String] = CssValue("backgroundImage")
  val listStyleType: CssValue[String] = CssValue("listStyleType")
  val strokeWidth: CssValue[String] = CssValue("strokeWidth")
  val textOverflow: CssValue[String] = CssValue("textOverflow")
  val fillRule: CssValue[String] = CssValue("fillRule")
  val borderBottomColor: CssValue[String] = CssValue("borderBottomColor")
  val zIndex: CssValue[String] = CssValue("zIndex")
  val position: CssValue[String] = CssValue("position")
  val listStyle: CssValue[String] = CssValue("listStyle")
  val dominantBaseline: CssValue[String] = CssValue("dominantBaseline")
  val overflowY: CssValue[String] = CssValue("overflowY")
  val fill: CssValue[String] = CssValue("fill")
  val captionSide: CssValue[String] = CssValue("captionSide")
  val borderCollapse: CssValue[String] = CssValue("borderCollapse")
  val boxShadow: CssValue[String] = CssValue("boxShadow")
  val quotes: CssValue[String] = CssValue("quotes")
  val tableLayout: CssValue[String] = CssValue("tableLayout")
  val unicodeBidi: CssValue[String] = CssValue("unicodeBidi")
  val borderBottomWidth: CssValue[String] = CssValue("borderBottomWidth")
  val backgroundSize: CssValue[String] = CssValue("backgroundSize")
  val textDecoration: CssValue[String] = CssValue("textDecoration")
  val strokeDashoffset: CssValue[String] = CssValue("strokeDashoffset")
  val fontSize: CssValue[String] = CssValue("fontSize")
  val border: CssValue[String] = CssValue("border")
  val pageBreakBefore: CssValue[String] = CssValue("pageBreakBefore")
  val borderTopRightRadius: CssValue[String] = CssValue("borderTopRightRadius")
  val borderBottomLeftRadius: CssValue[String] = CssValue("borderBottomLeftRadius")
  val textTransform: CssValue[String] = CssValue("textTransform")
  val rubyPosition: CssValue[String] = CssValue("rubyPosition")
  val strokeLinejoin: CssValue[String] = CssValue("strokeLinejoin")
  val clipPath: CssValue[String] = CssValue("clipPath")
  val borderRightColor: CssValue[String] = CssValue("borderRightColor")
  val fontFamily: CssValue[String] = CssValue("fontFamily")
  val clear: CssValue[String] = CssValue("clear")
  val content: CssValue[String] = CssValue("content")
  val backgroundClip: CssValue[String] = CssValue("backgroundClip")
  val marginBottom: CssValue[String] = CssValue("marginBottom")
  val counterReset: CssValue[String] = CssValue("counterReset")
  val outlineWidth: CssValue[String] = CssValue("outlineWidth")
  val marginRight: CssValue[String] = CssValue("marginRight")
  val paddingLeft: CssValue[String] = CssValue("paddingLeft")
  val borderBottom: CssValue[String] = CssValue("borderBottom")
  val wordBreak: CssValue[String] = CssValue("wordBreak")
  val marginTop: CssValue[String] = CssValue("marginTop")
  val top: CssValue[String] = CssValue("top")
  val fontWeight: CssValue[String] = CssValue("fontWeight")
  val borderRight: CssValue[String] = CssValue("borderRight")
  val width: CssValue[String] = CssValue("width")
  val kerning: CssValue[String] = CssValue("kerning")
  val pageBreakAfter: CssValue[String] = CssValue("pageBreakAfter")
  val borderBottomStyle: CssValue[String] = CssValue("borderBottomStyle")
  val fontStretch: CssValue[String] = CssValue("fontStretch")
  val padding: CssValue[String] = CssValue("padding")
  val strokeOpacity: CssValue[String] = CssValue("strokeOpacity")
  val markerStart: CssValue[String] = CssValue("markerStart")
  val bottom: CssValue[String] = CssValue("bottom")
  val borderLeftWidth: CssValue[String] = CssValue("borderLeftWidth")
  val clipRule: CssValue[String] = CssValue("clipRule")
  val backgroundPosition: CssValue[String] = CssValue("backgroundPosition")
  val backgroundColor: CssValue[String] = CssValue("backgroundColor")
  val pageBreakInside: CssValue[String] = CssValue("pageBreakInside")
  val backgroundOrigin: CssValue[String] = CssValue("backgroundOrigin")
  val strokeLinecap: CssValue[String] = CssValue("strokeLinecap")
  val borderTopWidth: CssValue[String] = CssValue("borderTopWidth")
  val outlineStyle: CssValue[String] = CssValue("outlineStyle")
  val borderTop: CssValue[String] = CssValue("borderTop")
  val outlineColor: CssValue[String] = CssValue("outlineColor")
  val paddingBottom: CssValue[String] = CssValue("paddingBottom")
  val marginLeft: CssValue[String] = CssValue("marginLeft")
  val font: CssValue[String] = CssValue("font")
  val outline: CssValue[String] = CssValue("outline")
  val wordSpacing: CssValue[String] = CssValue("wordSpacing")
  val maxHeight: CssValue[String] = CssValue("maxHeight")
  val fillOpacity: CssValue[String] = CssValue("fillOpacity")
  val letterSpacing: CssValue[String] = CssValue("letterSpacing")
  val borderSpacing: CssValue[String] = CssValue("borderSpacing")
  val backgroundRepeat: CssValue[String] = CssValue("backgroundRepeat")
  val borderRadius: CssValue[String] = CssValue("borderRadius")
  val borderWidth: CssValue[String] = CssValue("borderWidth")
  val borderBottomRightRadius: CssValue[String] = CssValue("borderBottomRightRadius")
  val whiteSpace: CssValue[String] = CssValue("whiteSpace")
  val fontStyle: CssValue[String] = CssValue("fontStyle")
  val minWidth: CssValue[String] = CssValue("minWidth")
  val stopColor: CssValue[String] = CssValue("stopColor")
  val borderTopLeftRadius: CssValue[String] = CssValue("borderTopLeftRadius")
  val borderColor: CssValue[String] = CssValue("borderColor")
  val marker: CssValue[String] = CssValue("marker")
  val glyphOrientationVertical: CssValue[String] = CssValue("glyphOrientationVertical")
  val markerMid: CssValue[String] = CssValue("markerMid")
  val fontValiant: CssValue[String] = CssValue("fontValiant")
  val minHeight: CssValue[String] = CssValue("minHeight")
  val stroke: CssValue[String] = CssValue("stroke")
  val rubyOverhang: CssValue[String] = CssValue("rubyOverhang")
  val overflowX: CssValue[String] = CssValue("overflowX")
  val textAlign: CssValue[String] = CssValue("textAlign")
  val margin: CssValue[String] = CssValue("margin")
  val animationFillMode: CssValue[String] = CssValue("animationFillMode")
  val floodColor: CssValue[String] = CssValue("floodColor")
  val animationIterationCount: CssValue[String] = CssValue("animationIterationCount")
  val textShadow: CssValue[String] = CssValue("textShadow")
  val backfaceVisibility: CssValue[String] = CssValue("backfaceVisibility")
  val animationDelay: CssValue[String] = CssValue("animationDelay")
  val animationTimingFunction: CssValue[String] = CssValue("animationTimingFunction")
  // TODO val columnWidth: js.Any = js.native
  // TODO val columnRuleColor: js.Any = js.native
  // TODO val columnRuleWidth: js.Any = js.native
  val transitionDelay: CssValue[String] = CssValue("transitionDelay")
  val transition: CssValue[String] = CssValue("transition")
  val enableBackground: CssValue[String] = CssValue("enableBackground")
  val columnRuleStyle: CssValue[String] = CssValue("columnRuleStyle")
  val animation: CssValue[String] = CssValue("animation")
  val transform: CssValue[String] = CssValue("transform")
  val colorInterpolationFilters: CssValue[String] = CssValue("colorInterpolationFilters")
  val transitionTimingFunction: CssValue[String] = CssValue("transitionTimingFunction")
  val animationPlayState: CssValue[String] = CssValue("animationPlayState")
  val transformOrigin: CssValue[String] = CssValue("transformOrigin")
  // TODO val columnGap: js.Any = js.native
  val transitionProperty: CssValue[String] = CssValue("transitionProperty")
  val fontFeatureSettings: CssValue[String] = CssValue("fontFeatureSettings")
  val breakBefore: CssValue[String] = CssValue("breakBefore")
  val perspective: CssValue[String] = CssValue("perspective")
  val animationDirection: CssValue[String] = CssValue("animationDirection")
  val animationDuration: CssValue[String] = CssValue("animationDuration")
  val animationName: CssValue[String] = CssValue("animationName")
  val columnRule: CssValue[String] = CssValue("columnRule")
  val columnFill: CssValue[String] = CssValue("columnFill")
  val perspectiveOrigin: CssValue[String] = CssValue("perspectiveOrigin")
  val lightingColor: CssValue[String] = CssValue("lightingColor")
  val columns: CssValue[String] = CssValue("columns")
  val floodOpacity: CssValue[String] = CssValue("floodOpacity")
  val columnSpan: CssValue[String] = CssValue("columnSpan")
  val breakInside: CssValue[String] = CssValue("breakInside")
  val transitionDuration: CssValue[String] = CssValue("transitionDuration")
  val breakAfter: CssValue[String] = CssValue("breakAfter")
  // TODO val columnCount: js.Any = js.native
  val transformStyle: CssValue[String] = CssValue("transformStyle")
